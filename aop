import java.lang.reflect.*;

public class MethodLoggingHandler implements InvocationHandler {

    private final Object target;

    public MethodLoggingHandler(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        long startTime = System.currentTimeMillis();
        try {
            System.out.println("Entering Method: " + method.getName());
            Object result = method.invoke(target, args);  // Invoke the method on the actual object
            long timeTaken = System.currentTimeMillis() - startTime;
            System.out.println("Exiting Method: " + method.getName() + " | Execution Time: " + timeTaken + " ms");
            return result;
        } catch (Exception e) {
            System.err.println("Exception in Method: " + method.getName() + " | " + e.getMessage());
            throw e;
        }
    }

    public static Object createProxy(Object target) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(),
                target.getClass().getInterfaces(), new MethodLoggingHandler(target));
    }
}
