import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Aspect
@Component
public class LoggerAspect {

    private static final Logger logger = LoggerFactory.getLogger(LoggerAspect.class);

    // Pointcut for all methods in a specific package
    @Before("execution(* com.example.package..*(..))")
    public void logClassAndMethodStart(JoinPoint joinPoint) {
        logger.info("Entering Class: {} | Method: {}", 
            joinPoint.getTarget().getClass().getName(), 
            joinPoint.getSignature().getName());
    }

    @After("execution(* com.example.package..*(..))")
    public void logMethodEnd(JoinPoint joinPoint) {
        logger.info("Exiting Method: {}", joinPoint.getSignature().getName());
    }

    @AfterThrowing(value = "execution(* com.example.package..*(..))", throwing = "ex")
    public void logException(JoinPoint joinPoint, Throwable ex) {
        logger.error("Exception in Method: {} | Message: {}", 
            joinPoint.getSignature().getName(), 
            ex.getMessage(), ex);
    }

    @Around("execution(* com.example.package..*(..))")
    public Object logMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        long startTime = System.currentTimeMillis();
        try {
            Object result = joinPoint.proceed();
            long timeTaken = System.currentTimeMillis() - startTime;
            logger.info("Method {} executed in {} ms", joinPoint.getSignature().getName(), timeTaken);
            return result;
        } catch (Throwable ex) {
            logger.error("Error in method: {}", joinPoint.getSignature().getName(), ex);
            throw ex;
        }
    }
}
